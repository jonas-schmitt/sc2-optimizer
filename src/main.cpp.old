#include <iostream>
#include <string>

#include <QApplication>

#include "../include/GuiWindow.h"

#include "../include/TemplateInit.h"

#include "../include/InitPlayerUnits.h"
#include "../include/UnitFactory.h"
#include "../include/PlayerState.h"
#include "../include/MicroSimulation.h"
#include "GuiInterface.h"

static GuiInterface<Zerg, Protoss> *microSim;

bool run(int b)
{
	return microSim->run(b);
}

int main(int argc, char *argv[])
{
	if (argc < 3)
	{
		std::cout << "User doesn't want to hand in own Lists, so we use predefined ones." << std::endl;
		std::cout << "Maybe you should try: './bin/part2 -o -p list1 -q list2'" << std::endl;
		std::cout << "'-p' is for Player1, '-q' for Player2. '-o' means, that the output from part1 is used. Else the untis must be listed linewise." << std::endl;
	}
	
	bool player1 = false;
	bool player2 = false;
	std::string list1;
	std::string list2;
	bool output = false;
	if (argc > 3)
	{
		std::string input;
		//extract lists
		for (int i = 0; i < argc; ++i)
		{
			input = argv[i];
			if (input.compare("-o") == 0)
			{
				output = true;
			}
			else if (input.compare("-p") == 0)
			{
				player1 = true;
				list1 = argv[i+1];
			}
			else if (input.compare("-q") == 0)
			{
				player2 = true;
				list2 = argv[i+1];
			}
		}
		
	}
	std::cout << "Done with interpreting the parameters." << std::endl;
	
	std::cout << "Zerg vs Protoss" << std::endl;
    std::vector<std::string> units_pl1;
    std::vector<std::string> units_pl2;
	
	//Both Players are set
	if (player1 == true && player2 == true)
	{
		std::cout << "Valid input." << std::endl;
		std::ifstream fs;
		std::string temp;
		//The output from part1 is used
		if (output == true)
		{
			//Player1
			fs.open(list1.c_str(), std::fstream::in);
			if (!(fs))
			{
				std::cerr << "ERROR Couldnt open file: " << list1 << std::endl;
				exit(EXIT_FAILURE);
			}
			while (std::getline(fs, temp))
			{
				//dirty hack
				if (temp.find("sorted by") != std::string::npos)
					break;
			}
			while (std::getline(fs, temp))
			{
				std::string unit;
				fs >> unit;
				//very dirty hack
				if (unit == "We")
					break;
				fs >> unit;
				fs >> unit;
				fs >> unit;
				fs >> unit;
				units_pl1.push_back(unit);
			}
			fs.close();
			
			//Player2
			fs.open(list2.c_str(), std::fstream::in);
			if (!(fs))
			{
				std::cerr << "ERROR Couldnt open file: " << list2 << std::endl;
				exit(EXIT_FAILURE);
			}
			while (std::getline(fs, temp))
			{
				//dirty hack
				if (temp.find("sorted by") != std::string::npos)
					break;
			}
			while (std::getline(fs, temp))
			{
				std::string unit;
				fs >> unit;
				//very dirty hack
				if (unit == "We")
					break;
				fs >> unit;
				fs >> unit;
				fs >> unit;
				fs >> unit;
				units_pl2.push_back(unit);
			}
			fs.close();
		}
		else
		{
			//read self-created file
			
			fs.open(list1.c_str(), std::fstream::in);
			if (!(fs))
			{
				std::cerr << "ERROR Couldnt open file: " << list1 << std::endl;
				exit(EXIT_FAILURE);
			}
			while (fs >> temp)
			{
				units_pl1.push_back(temp);
			}
			fs.close();
			
			fs.open(list2.c_str(), std::fstream::in);
			if (!(fs))
			{
				std::cerr << "ERROR Couldnt open file: " << list1 << std::endl;
				exit(EXIT_FAILURE);
			}
			while (fs >> temp)
			{
				units_pl2.push_back(temp);
			}
			fs.close();
		}
	}
	else
	{
		units_pl1 = {"BroodLord","BroodLord","Queen","Hydralisk","Hydralisk","Corruptor","Hydralisk", "Hydralisk","Zergling","Hydralisk","Hydralisk","BroodLord"};
		units_pl2 = {"Probe","Colossus","Mothership","Probe","Stalker", "Zealot","Stalker", "Mothership"};
	}


    //MicroSimulation<Zerg,Protoss> sim(pair<double,double>(0,0), pair<double,double>(100,100),"../../part2/data/Zerg/combat.txt", "../../part2/data/Protoss/combat.txt");
	/* file path for the executable created by make */
    //MicroSimulation<Zerg,Protoss> sim(pair<double,double>(0,0), pair<double,double>(1000,1000), "./data/Zerg/combat.txt", "./data/Protoss/combat.txt");
    microSim = new GuiInterface<Zerg,Protoss>(pair<double,double>(0,0), pair<double,double>(500,500), "./data/Zerg/combat.txt", "./data/Protoss/combat.txt");
	using std::string;
	using std::vector;
	using std::cout;
	using std::endl;

//	cout << "Zerg vs Protoss" << endl;
//	vector<string> units_pl1 = {"BroodLord","BroodLord","Queen","Hydralisk","Hydralisk","Corruptor","Hydralisk", "Hydralisk","Zergling","Hydralisk","Hydralisk","BroodLord"};
//	vector<string> units_pl2 = {"Probe","Colossus","Mothership","Probe","Stalker", "Zealot","Stalker", "Mothership"};

    microSim->initBothPlayers(units_pl1, units_pl2);

	/*
	sim.initBothPlayers(units_pl1,units_pl2);
    bool finished = false;
    cout << "Simulation started" << endl;
    while(!finished)
    {
        finished = sim.run(1);
    }
    cout << "Simulation finished" << endl;
    std::string winner;
    if(sim.getPlayer1().unitList.empty() && !sim.getPlayer2().unitList.empty())
    {
        winner = "Protoss";
    }
    else if(sim.getPlayer2().unitList.empty() && !sim.getPlayer1().unitList.empty())
    {
        winner = "Zerg";
    }
    else
    {
        winner = "Nobody";
    }

    cout << winner << " wins!" << endl;
	return 0;
	*/
/*
	double res = microSim->compareCosts();
    int res2 = microSim->compareStats();
	cout << "The Difference in Costs is " << res << " (a gas to minerals ratio of 1.5 was used)" << endl;
	if (res > 0)
	{
		cout << "Zerg wins!" << endl;
	}
	else if (res < 0)
	{
		cout << "Protoss wins!" << endl;
	}
	else
	{
		cout << "Draw!" << endl;
	}

    cout << "By comparing the overall unit stats: " << endl;
    if (res2 > 0)
    {
        cout << "Zerg wins!" << endl;
    }
    else if (res2 < 0)
    {
        cout << "Protoss wins!" << endl;
    }
    else
    {
        cout << "Draw!" << endl;
    }*/
	/*
	std::cout << d->unitVec0.size() << std::endl;
	std::cout << d->unitVec1.size() << std::endl;
	std::cout << d->unitVec2.size() << std::endl;
	std::cout << d->unitVec3.size() << std::endl;
	std::cout << d->unitVec4.size() << std::endl;
	std::cout << d->unitVec5.size() << std::endl;
	std::cout << d->unitVec6.size() << std::endl;
	std::cout << d->unitVec7.size() << std::endl;
	std::cout << d->unitVec8.size() << std::endl;
	std::cout << d->unitVec9.size() << std::endl;
	std::cout << d->unitVec10.size() << std::endl;
	std::cout << std::endl;
	*/


	QApplication app(argc, argv);
	app.setStyle("plastique");
	GuiWindow window;
	window.show();
	window.setStartFunc(run);
	microSim->setGuiWindow(&window);
    return app.exec();
}

